/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package client;

import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import server.StoreInterface;

/**
 *
 * @author Yazan
 */
public class Client extends javax.swing.JFrame {

    /**
     * Creates new form Client
     */
    Registry reg = LocateRegistry.getRegistry("localhost", 1099);
    StoreInterface server = (StoreInterface) reg.lookup("rmi://localhost/service");

    int cart_count;

    DefaultTableModel model;

    public Client() throws RemoteException, NotBoundException {
        initComponents();

        cart_count = server.initialize();

        model = (DefaultTableModel) ModelsTabel.getModel();
        ModelsTabel.setEnabled(false);

        ArrayList<String> categories;
        categories = server.getCategories();
        categories.forEach(category_combobox::addItem);

        String category = (String) category_combobox.getSelectedItem();
        ArrayList<String> products;
        products = server.getProducts(category);
        product_combobox.removeAllItems();
        products.forEach(product_combobox::addItem);

        showModels();
        
        this.addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowClosing(java.awt.event.WindowEvent windowEvent) {
                try {
                    server.destroy(cart_count);
                } catch (RemoteException ex) {
                    Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        category_combobox = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        product_combobox = new javax.swing.JComboBox<>();
        showcart = new javax.swing.JButton();
        showbillsbtn = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        ModelsTabel = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        modelno = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        quantity = new javax.swing.JTextField();
        add2cart = new javax.swing.JButton();
        errorlbl = new javax.swing.JLabel();
        successlbl = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Welcome to RMIStore");
        setMaximumSize(new java.awt.Dimension(600, 600));
        setMinimumSize(new java.awt.Dimension(600, 600));
        setPreferredSize(new java.awt.Dimension(600, 600));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setText("Category :");

        category_combobox.setMaximumSize(new java.awt.Dimension(100, 25));
        category_combobox.setMinimumSize(new java.awt.Dimension(100, 25));
        category_combobox.setPreferredSize(new java.awt.Dimension(100, 25));
        category_combobox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                category_comboboxItemStateChanged(evt);
            }
        });
        category_combobox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                category_comboboxActionPerformed(evt);
            }
        });

        jLabel2.setText("Product :");

        product_combobox.setMaximumSize(new java.awt.Dimension(100, 25));
        product_combobox.setMinimumSize(new java.awt.Dimension(100, 25));
        product_combobox.setPreferredSize(new java.awt.Dimension(100, 25));
        product_combobox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                product_comboboxItemStateChanged(evt);
            }
        });
        product_combobox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                product_comboboxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(category_combobox, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(46, 46, 46)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(product_combobox, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(78, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(product_combobox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(category_combobox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 30, 490, 60));

        showcart.setText("Show Cart");
        showcart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showcartActionPerformed(evt);
            }
        });
        getContentPane().add(showcart, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 510, 190, -1));

        showbillsbtn.setText("My Bills");
        showbillsbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showbillsbtnActionPerformed(evt);
            }
        });
        getContentPane().add(showbillsbtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 510, 180, -1));

        ModelsTabel.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Model ID", "Model Name", "Quantity", "Price"
            }
        ));
        jScrollPane2.setViewportView(ModelsTabel);

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 110, 520, 220));

        jLabel3.setText("Model ID :");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 360, 80, 20));

        modelno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modelnoActionPerformed(evt);
            }
        });
        getContentPane().add(modelno, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 360, 100, -1));

        jLabel4.setText("Quantity :");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 360, 70, 20));
        getContentPane().add(quantity, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 360, 100, -1));

        add2cart.setText("Add to Cart");
        add2cart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                add2cartActionPerformed(evt);
            }
        });
        getContentPane().add(add2cart, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 410, 170, -1));

        errorlbl.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        errorlbl.setForeground(new java.awt.Color(255, 0, 0));
        errorlbl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        getContentPane().add(errorlbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 440, 300, 20));

        successlbl.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        successlbl.setForeground(new java.awt.Color(0, 153, 0));
        successlbl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        getContentPane().add(successlbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 440, 210, 20));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void category_comboboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_category_comboboxActionPerformed
        try {
            String category = (String) category_combobox.getSelectedItem();

            ArrayList<String> products;
            products = server.getProducts(category);
            product_combobox.removeAllItems();
            products.forEach(product_combobox::addItem);

            showModels();
        } catch (RemoteException ex) {
            Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_category_comboboxActionPerformed

    private void category_comboboxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_category_comboboxItemStateChanged

    }//GEN-LAST:event_category_comboboxItemStateChanged

    private void product_comboboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_product_comboboxActionPerformed
        showModels();
    }//GEN-LAST:event_product_comboboxActionPerformed

    private void add2cartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_add2cartActionPerformed
        try {
            errorlbl.setText("");
            successlbl.setText("");
            String modelnostr = modelno.getText();
            String quantitystr = quantity.getText();
            int modelID = 0, modelsCount = 0, quantity = 0;
            if (modelnostr.equals("") || quantitystr.equals("")) {
                errorlbl.setText("*you should not leave a field empty");
            } else {
                try {
                    modelID = Integer.parseInt(modelnostr);
                    modelsCount = server.getModelsCount();
                    quantity = Integer.parseInt(quantitystr);
                } catch (NumberFormatException ex) {
                    modelID = -1;
                    quantity = -1;
                }
                if (modelID == -1 || quantity == -1) {
                    errorlbl.setText("*the input must be numerical only");
                } else {
                    if (modelID <= modelsCount) {
                        boolean added;
                        added = server.addtoCart(cart_count, modelID, quantity);
                        if (!added) {
                            errorlbl.setText("*sorry, there is no enough items");
                        } else {
                            successlbl.setText("Model has been added");
                        }
                        showModels();
                    } else {
                        errorlbl.setText("*there is no model with this number");
                    }
                }
            }

        } catch (RemoteException ex) {
            Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_add2cartActionPerformed

    private void showcartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showcartActionPerformed
        try {
            if(!server.cartisEmpty(cart_count)) {
            ShowCart showcart = new ShowCart(cart_count, this);
            showcart.setVisible(true);
            showcart.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
            } else  {
                JOptionPane.showMessageDialog(rootPane, "your cart is empty .. buy some");
            }
        } catch (RemoteException | NotBoundException ex) {
            Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_showcartActionPerformed

    private void showbillsbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showbillsbtnActionPerformed
        try {
            int userID = server.getUserID();

            ArrayList<Integer> userbills;
            userbills = server.getUserbills(userID);
            if (userbills.isEmpty()) {
                JOptionPane.showMessageDialog(rootPane, "you dont't have any bills right now");
            } else {
                int billID = userbills.get(0);
                ShowBill showBill = new ShowBill(billID);
                showBill.setVisible(true);
                showBill.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
            }
        } catch (RemoteException | NotBoundException ex) {
            Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_showbillsbtnActionPerformed

    private void product_comboboxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_product_comboboxItemStateChanged
    }//GEN-LAST:event_product_comboboxItemStateChanged

    private void modelnoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modelnoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_modelnoActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                try {
                    new Client().setVisible(true);
                } catch (RemoteException | NotBoundException ex) {
                    Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    public final void showModels() {
        try {
            String category = (String) category_combobox.getSelectedItem();
            String product = (String) product_combobox.getSelectedItem();
            Map<String, List> models;
            models = server.getModels(category, product);
            ArrayList<String> modelInfo;
            for (int i = model.getRowCount() - 1; i >= 0; i--) {
                model.removeRow(i);
            }
            for (int i = 0; i < models.size(); i++) {
                modelInfo = (ArrayList<String>) models.get(Integer.toString(i));
                model.addRow(new Object[]{modelInfo.get(0), modelInfo.get(1), modelInfo.get(2), modelInfo.get(3)});
            }
        } catch (RemoteException ex) {
            Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable ModelsTabel;
    private javax.swing.JButton add2cart;
    private javax.swing.JComboBox<String> category_combobox;
    private javax.swing.JLabel errorlbl;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField modelno;
    private javax.swing.JComboBox<String> product_combobox;
    private javax.swing.JTextField quantity;
    private javax.swing.JButton showbillsbtn;
    private javax.swing.JButton showcart;
    private javax.swing.JLabel successlbl;
    // End of variables declaration//GEN-END:variables
}
